problem1 :: () -> int {
	// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
	// Find the sum of all the multiples of 3 or 5 below 1000.
	
	sum_of_multiples_below :: (factor: int, below_limit: int) -> int {
		
		// S   = 1*x + 2*x + 3*x + ... + n*x = 
		//       x*(1 +   2 +   3 + ... + n) =
		//       x*(n + n-1 + n-2 + ... + 1) =
		// 
		// 2*S = x * (n+1) * n
		// S = x * (n + 1) * n / 2
		
		n := (below_limit - 1) / factor; // -1 because we don't want to include the limit. The problem states *below* 1000.
		
		return factor * (n + 1) * n / 2;
	}
	
	limit := 1000;
	
	sum_of_multiples_of_3 := sum_of_multiples_below(3, limit);
	sum_of_multiples_of_5 := sum_of_multiples_below(5, limit);
	sum_of_multiples_of_3_and_5 := sum_of_multiples_below(15, limit); // Multiples of both 3 and 5 are multiples of 15.
	
	// n(A + B) = n(A) + n(B) + n(A intersection B)
	sum_of_multiples_of_3_or_5  := sum_of_multiples_of_3 + sum_of_multiples_of_5 - sum_of_multiples_of_3_and_5;
	
	return sum_of_multiples_of_3_or_5;
}

problem2 :: () -> int {
	// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
	// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.	
	
	// By induction, we notice that the even terms indices are 2, 5, 8, 11 -> (2 + 3*n) with n starting at 0.
	
	limit := 4_000_000;
	
	previous_term := 0;
	current_term  := 1;
	
	sum_of_even_terms := 0;
	while current_term < limit {
		next_term := previous_term + current_term;
		previous_term = current_term;
		current_term = next_term;
		
		sum_of_even_terms += current_term * (1 - current_term & 1);  // The expression on the right of the '*' is 1 when the number is even and 0 otherwise.
	}
	
	return sum_of_even_terms;
}

problem3 :: () -> int {
	// The prime factors of 13195 are 5, 7, 13 and 29.
	// What is the largest prime factor of the number 600851475143?
	
	number := 600851475143;
	
	primes: [..] int;
	array_add(*primes, 2);
		
	get_next_prime :: (primes: *[..] int, current_prime: int) -> int {		
		number := current_prime + 1;
		
		while true {
			is_prime := true;
			for prime: << primes {
				if number % prime == 0 {
					is_prime = false;
					break;
				}
			}
			
			if is_prime break;
			
			number += 1;
		}
		
		array_add(primes, number);
		return number;
	}
	
	current_prime := primes[0];
	
	rest := number; 
	while true {
		while rest % current_prime == 0 {
			rest /= current_prime;
		}
		
		if rest == 1 break;
		
		current_prime = get_next_prime(*primes, current_prime);
	}
	
	return current_prime;
	
}

main :: () {
	check :: ($problem: int) {
		solutions :: int.[
			233168,
			4613732,
			6857
		];
		
		given_solution   := #insert #run tprint("problem%();", problem);
		correct_solution := solutions[problem - 1];
		
		is_correct := given_solution == correct_solution;
		
		print("[%] problem %: % % %\n", ifx is_correct then "correct" else "incorrect", problem, given_solution, ifx is_correct then "==" else "!=", correct_solution);
	}
	
	check(1);
	check(2);
	check(3);
	
}
	
#import "Basic";
	